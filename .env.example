# Claude Code Remote Configuration
# Copy this file to .env and configure with your actual values

# ===== 選擇通知方式：Email、LINE、Telegram 或 Slack =====
# 可以同時啟用多個通知方式
EMAIL_ENABLED=false
LINE_ENABLED=false
TELEGRAM_ENABLED=true
SLACK_ENABLED=false

# ===== Email 配置 (如果使用 Email) =====
# SMTP 发送邮件配置
SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_SECURE=true
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# 发件人信息 (可选，默认使用 SMTP_USER)
EMAIL_FROM=your-email@gmail.com
EMAIL_FROM_NAME=Claude Code Remote 通知系统

# IMAP 接收邮件配置  
IMAP_HOST=imap.gmail.com
IMAP_PORT=993
IMAP_SECURE=true
IMAP_USER=your-email@gmail.com
IMAP_PASS=your-app-password

# 邮件路由配置
# 接收通知的邮箱地址
EMAIL_TO=your-email@gmail.com

# 允许发送命令的邮箱地址（安全白名单）
ALLOWED_SENDERS=your-email@gmail.com

# ===== LINE 配置 (如果使用 LINE) =====
# 從 LINE Developers Console 獲取: https://developers.line.biz/
LINE_CHANNEL_ACCESS_TOKEN=your-line-channel-access-token
LINE_CHANNEL_SECRET=your-line-channel-secret

# LINE 接收者配置（設定一個或兩個）
# LINE_USER_ID=your-line-user-id
# LINE_GROUP_ID=your-line-group-id

# LINE 白名單（逗號分隔的使用者/群組 ID）
# 如果不設定，只有配置的 USER_ID/GROUP_ID 可以使用
# LINE_WHITELIST=U1234567890abcdef,C1234567890abcdef

# LINE webhook 埠號（預設：3000）
# LINE_WEBHOOK_PORT=3000

# ===== Telegram 配置 (如果使用 Telegram) =====
# 從 @BotFather 獲取 Bot Token
TELEGRAM_BOT_TOKEN=your-telegram-bot-token

# Telegram 接收者配置（設定一個或兩個）
# 個人聊天 ID
# TELEGRAM_CHAT_ID=123456789
# 群組 ID（通常是負數）
# TELEGRAM_GROUP_ID=-1001234567890

# Telegram 白名單（逗號分隔的 Chat ID）
# 如果不設定，只有配置的 CHAT_ID/GROUP_ID 可以使用
# TELEGRAM_WHITELIST=123456789,-1001234567890

# Telegram webhook 埠號（預設：3001）
# TELEGRAM_WEBHOOK_PORT=3001

# Telegram webhook URL（您的公開 HTTPS URL）
# TELEGRAM_WEBHOOK_URL=https://your-domain.com

# 強制使用 IPv4 連接 Telegram API（預設：false）
# 在某些網路環境下，IPv6 連接可能不穩定，設置為 true 可強制使用 IPv4
# TELEGRAM_FORCE_IPV4=false

# ===== Slack 配置 (如果使用 Slack) =====
# 從 Slack App 設定中獲取 Bot User OAuth Token
# 前往 https://api.slack.com/apps 建立和管理您的應用
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token

# Slack 頻道 ID（預設通知頻道，可選）
# 在 Slack 中右鍵點擊頻道 → 查看頻道詳情 → 複製頻道 ID
# 用於發送簡單通知（非互動式）
# SLACK_CHANNEL_ID=C1234567890

# Slack 簽名密鑰（用於驗證 webhook 請求）
# 從 Slack App 設定 → Basic Information → App Credentials 中獲取
SLACK_SIGNING_SECRET=your-slack-signing-secret

# Slack 白名單（逗號分隔的頻道 ID 或使用者 ID）
# 如果不設定且未設定 CHANNEL_ID，則允許所有頻道和 DM
# 設定使用者 ID 可以允許該使用者透過直接訊息（DM）使用機器人
# SLACK_WHITELIST=C1234567890,U0987654321

# Slack webhook 埠號（預設：3002）
# SLACK_WEBHOOK_PORT=3002

# ===== Slack Tmux 模式功能說明 =====
# 新架構：每個 Slack 討論串都有自己的持久化 tmux Claude 會話
#
# 使用方式：
# 1. 在頻道中 @mention 機器人：@BotName <your request>
#    - 首次提及會創建新的 tmux 會話並啟動 Claude with /bg-workflow
#    - 討論串中的後續提及會繼續該會話中的對話
#    - 討論串歷史會自動包含為上下文
#
# 2. 直接傳送訊息給機器人（DM）：<your request>
#    - 每個 DM 對話都有自己的持久化 Claude 會話
#    - 後續訊息會繼續該會話中的對話
#
# 3. 特殊指令：
#    - @BotName status - 檢查活動會話狀態
#    - @BotName cleanup - 終止該討論串的會話
#    - @BotName help - 顯示幫助訊息
#
# 範例：
# @BotName Implement user authentication with JWT tokens
# @BotName Add error handling to the authentication logic
# @BotName status
#
# 必要的 OAuth Scopes：
# - app_mentions:read (接收頻道中的 @mentions)
# - im:history (接收直接訊息)
# - im:read (讀取直接訊息資訊)
# - chat:write (發送訊息)
# - channels:history (讀取頻道討論串歷史)
# - groups:history (讀取私人頻道討論串歷史)
#
# 必要的 Event Subscriptions：
# - app_mention (頻道中的 @mentions)
# - message.im (直接訊息)
#
# 工作原理：
# - 每個討論串映射到唯一的 tmux 會話名稱
# - 首次提及時創建 tmux 會話並啟動 Claude with /bg-workflow
# - 後續提及將訊息注入到同一個 Claude 會話中
# - 本地附加到會話：tmux attach -t <session-name>

# ===== Unified Webhook Server (推薦) =====
# 統一 webhook 伺服器可以在單一埠號上處理所有平台
# 如果使用統一伺服器，所有平台將共用這個埠號
# UNIFIED_WEBHOOK_PORT=3001

# ===== 系统配置 =====
# 会话映射文件路径
SESSION_MAP_PATH=/path/to/your/project/src/data/session-map.json

# 运行模式：pty 或 tmux
INJECTION_MODE=pty

# Claude CLI 路径（可选，默认使用系统PATH中的claude）
CLAUDE_CLI_PATH=claude

# 日志级别：debug, info, warn, error
LOG_LEVEL=info

# 是否记录PTY输出（调试用）
PTY_OUTPUT_LOG=false

# ===== 超时配置 =====
# 命令执行超时时间（毫秒）
COMMAND_TIMEOUT=10000

# SMTP 连接超时时间（毫秒）
SMTP_TIMEOUT=10000

# 通知超时时间（毫秒）
NOTIFICATION_TIMEOUT=3000

# 通知显示时间（毫秒）
NOTIFICATION_DISPLAY_TIME=10000

# ===== 邮件模板配置 =====
# 邮件检查间隔（秒）
CHECK_INTERVAL=20

# 会话超时时间（小时）
SESSION_TIMEOUT=24

# ===== 测试配置（可选）=====
# 测试邮件使用的固定令牌（可选，默认动态生成）
TEST_TOKEN=

# Gmail 应用密码（用于测试脚本，可选）
GMAIL_APP_PASSWORD=

# ===== Gmail 配置说明 =====
# 1. 启用两步验证: https://myaccount.google.com/security
# 2. 生成应用密码: https://myaccount.google.com/apppasswords
# 3. 将生成的16位密码填入 SMTP_PASS 和 IMAP_PASS
# 4. 确保 SMTP_PORT=465 和 SMTP_SECURE=true (推荐SSL连接)

# ===== 其他邮件服务商配置示例 =====
# QQ邮箱:
# SMTP_HOST=smtp.qq.com
# SMTP_PORT=587 或 465
# IMAP_HOST=imap.qq.com
# IMAP_PORT=993

# 163邮箱:
# SMTP_HOST=smtp.163.com  
# SMTP_PORT=587 或 465
# IMAP_HOST=imap.163.com
# IMAP_PORT=993

# Outlook:
# SMTP_HOST=smtp.live.com
# SMTP_PORT=587
# IMAP_HOST=imap-mail.outlook.com
# IMAP_PORT=993
EOF < /dev/null